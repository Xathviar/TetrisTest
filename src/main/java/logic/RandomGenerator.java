package logic;

import logic.pieces.*;

import java.util.*;

/**
 * This Class is used for creating the <a href="https://tetris.fandom.com/wiki/Random_Generator">7-Bag</a> which Tetris uses
 */
public class RandomGenerator {

    /**
     * The variable tetrisPieceOrder represents the queue of tetromino pieces in the Tetris game.
     * It is a final variable of type Queue<Tetromino>.
     *
     * Tetromino pieces are objects that represent the different shapes that can be formed in the game,
     * such as the 'T' piece, 'L' piece, 'S' piece, etc.
     *
     * The tetrisPieceOrder queue is initially empty and will be filled with tetromino pieces using the generateNewOrder() method.
     * The generateNewOrder() method creates a random order of tetromino pieces, following the 7-Bag random generator algorithm.
     *
     * The getNext() method retrieves the next tetromino piece in the queue. If the queue has less than 4 pieces,
     * the generateNewOrder() method is called to generate more pieces before retrieving the next one.
     *
     * The peek(int number) method allows peeking ahead to see the next 'number' of tetromino pieces in the queue without removing them.
     * If the queue does not have enough pieces to peek, the generateNewOrder() method is called to generate more pieces.
     * The method returns a list of the peeked tetromino pieces.
     *
     * Example usage:
     *
     * RandomGenerator generator = new RandomGenerator(field);
     * Tetromino nextPiece = generator.getNext();
     * List<Tetromino> peekedPieces = generator.peek(3);
     */
    public final Queue<Tetromino> tetrisPieceOrder = new ArrayDeque<>();

    /**
     * The field variable holds a reference to a TetrisField object.
     *
     * TetrisField is a class that represents the playing field in a Tetris game.
     * It is used to store and manipulate the state of the game board, including
     * the current position and status of Tetromino pieces.
     *
     * The field variable is declared as private and final, which means it cannot be
     * modified once it is assigned a value. It is initialized in the constructor of
     * the RandomGenerator class.
     *
     * Example usage:
     *
     * TetrisField field = new TetrisField();
     * RandomGenerator generator = new RandomGenerator(field);
     */
    private final TetrisField field;

    /**
     * Constructs a RandomGenerator object with the given TetrisField.
     *
     * @param field the TetrisField on which the generator will operate
     */
    public RandomGenerator(TetrisField field) {
        this.field = field;
        generateNewOrder();
    }

    /**
     * Generates a new order for tetromino pieces.
     * This method shuffles a list of all tetromino pieces and adds them to the tetris piece order list.
     */
    private void generateNewOrder() {
        List<Tetromino> allTetrisPieces = new ArrayList<>();
        allTetrisPieces.add(new TPiece(field));
        allTetrisPieces.add(new IPiece(field));
        allTetrisPieces.add(new JPiece(field));
        allTetrisPieces.add(new LPiece(field));
        allTetrisPieces.add(new OPiece(field));
        allTetrisPieces.add(new SPiece(field));
        allTetrisPieces.add(new ZPiece(field));
        Collections.shuffle(allTetrisPieces);
        tetrisPieceOrder.addAll(allTetrisPieces);
    }

    /**
     * Retrieves the next Tetromino piece from the tetris piece order list.
     *
     * If the tetris piece order list is empty or contains less than 4 pieces,
     * a new order is generated by shuffling a list of all tetromino pieces.
     *
     * @return the next Tetromino piece in the order
     */
    public Tetromino getNext() {
        if (tetrisPieceOrder.size() < 4) {
            generateNewOrder();
        }
        return tetrisPieceOrder.poll();
    }

    /**
     * Retrieves a specified number of Tetromino pieces from the tetris piece order list.
     *
     * @param number the number of Tetromino pieces to retrieve
     * @return a List containing the specified number of Tetromino pieces
     */
    public List<Tetromino> peek(int number) {
        while (number > tetrisPieceOrder.size()) {
            generateNewOrder();
        }

        List<Tetromino> ret = new ArrayList<>();
        Object[] tetrisPieceOrderArr = tetrisPieceOrder.toArray();
        for (int i = 0; i < number; i++) {
            ret.add((Tetromino) tetrisPieceOrderArr[i]);
        }
        return ret;
    }

}
